import os
import streamlit as st
import base64
from openai import OpenAI
import openai
import tensorflow as tf
from PIL import Image, ImageOps
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from streamlit_drawable_canvas import st_canvas

# ==============================
# VARIABLES INICIALES
# ==============================
Expert = " "
profile_imgenh = " "

# ==============================
# FUNCI√ìN: ENCODEAR IMAGEN EN BASE64
# ==============================
def encode_image_to_base64(image_path):
    try:
        with open(image_path, "rb") as image_file:
            encoded_image = base64.b64encode(image_file.read()).decode("utf-8")
            return encoded_image
    except FileNotFoundError:
        return "Error: La imagen no se encontr√≥ en la ruta especificada."


# ==============================
# CONFIGURACI√ìN DE P√ÅGINA
# ==============================
st.set_page_config(page_title='üé® Tablero Inteligente', page_icon="ü§ñ")
st.title('üé® Tablero Inteligente')
st.markdown("""
Bienvenido al **Tablero Inteligente**.  
Aqu√≠ podr√°s **dibujar un boceto** y la inteligencia artificial intentar√° **interpretar lo que ve**.
""")

# ==============================
# SIDEBAR
# ==============================
with st.sidebar:
    st.subheader("‚ÑπÔ∏è Acerca de la app")
    st.write("Esta aplicaci√≥n demuestra la capacidad de una IA para interpretar un boceto en tiempo real.")
    st.caption("Dibuja en el panel principal y presiona el bot√≥n para analizar tu dibujo.")

# ==============================
# PANEL DE DIBUJO
# ==============================
st.subheader("üñåÔ∏è Dibuja en el panel y luego analiza tu creaci√≥n:")

stroke_width = st.sidebar.slider('‚úèÔ∏è Selecciona el ancho de l√≠nea', 1, 30, 5)
stroke_color = "#000000"  # Color del trazo
bg_color = '#FFFFFF'      # Fondo blanco

canvas_result = st_canvas(
    fill_color="rgba(255, 165, 0, 0.3)",  # color semitransparente para relleno
    stroke_width=stroke_width,
    stroke_color=stroke_color,
    background_color=bg_color,
    height=300,
    width=400,
    drawing_mode="freedraw",
    key="canvas",
)

# ==============================
# INGRESO DE API KEY
# ==============================
ke = st.text_input('üîë Ingresa tu API key de OpenAI', type="password")
os.environ['OPENAI_API_KEY'] = ke
api_key = os.environ['OPENAI_API_KEY']

# ==============================
# CLIENTE DE OPENAI
# ==============================
client = OpenAI(api_key=api_key) if api_key else None

# ==============================
# BOT√ìN DE AN√ÅLISIS
# ==============================
analyze_button = st.button("üîç Analizar dibujo", type="primary")

if canvas_result.image_data is not None and api_key and analyze_button:

    with st.spinner("‚è≥ Analizando tu dibujo..."):
        # Guardar y convertir la imagen
        input_numpy_array = np.array(canvas_result.image_data)
        input_image = Image.fromarray(input_numpy_array.astype('uint8'), 'RGBA')
        input_image.save('img.png')

        # Codificar en base64
        base64_image = encode_image_to_base64("img.png")

        # Prompt
        prompt_text = "Describe brevemente en espa√±ol el contenido del dibujo."

        # Crear payload
        messages = [
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt_text},
                    {
                        "type": "image_url",
                        "image_url": f"data:image/png;base64,{base64_image}",
                    },
                ],
            }
        ]

        # Solicitud a la API
        try:
            full_response = ""
            message_placeholder = st.empty()
            response = openai.chat.completions.create(
                model="gpt-4o-mini",  # modelo seleccionado
                messages=messages,
                max_tokens=500,
            )

            if response.choices[0].message.content is not None:
                full_response += response.choices[0].message.content
                message_placeholder.markdown("### üìù Interpretaci√≥n de la IA:")
                message_placeholder.markdown(full_response)

            if Expert == profile_imgenh:
                st.session_state.mi_respuesta = response.choices[0].message.content

        except Exception as e:
            st.error(f"‚ö†Ô∏è Ocurri√≥ un error: {e}")

# ==============================
# MENSAJES DE ADVERTENCIA
# ==============================
else:
    if not api_key:
        st.warning("üîë Debes ingresar tu API key para continuar.")
    elif analyze_button and canvas_result.image_data is None:
        st.warning("‚úèÔ∏è Por favor dibuja algo en el panel antes de analizar.")

